[tox]
envlist = install, qa, docs, build

[testenv]
deps =
    pytest
    pytest-cov
    pytest-timeout
    testfixtures
    requests
    pyyaml
    pyjwt

[testenv:coverage]
deps =
    coverage
    {[testenv]deps}
commands =
    coverage run -m pytest {posargs}
    coverage combine
    coverage report
    coverage html -d docs/build/coverage

[testenv:tests]
deps =
    {[testenv]deps}
commands =
    python -m pytest {posargs}

[testenv:flake8]
basepython = python3
skip_install = true
deps =
    flake8
commands =
    flake8 src/ tests/

[testenv:pylint]
basepython = python3
skip_install = false
deps =
    pylint
    {[testenv]deps}
commands =
    pylint src/

[testenv:mypy]
basepython = python3
skip_install = true
deps =
    types-requests
    types-PyYAML
    mypy
commands =
    mypy

[testenv:bandit]
basepython = python3
skip_install = true
deps =
    bandit
commands =
    bandit -r src/

[testenv:black]
basepython = python3
skip_install = true
deps =
    black
commands =
    black --check src tests

[testenv:isort]
basepython = python3
skip_install = true
deps =
    isort
commands =
    isort --check src tests

[testenv:qa]
basepython = python3
skip_install = false
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:mypy]deps}
    {[testenv:bandit]deps}
    {[testenv:black]deps}
    {[testenv:isort]deps}
    {[testenv:tests]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:mypy]commands}
    {[testenv:bandit]commands}
    {[testenv:black]commands}
    {[testenv:isort]commands}
    {[testenv:tests]commands}

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
    build
commands =
    python -m build

[testenv:docs]
basepython = python3
deps =
    -r{toxinidir}/docs/src/requirements.txt
    {[testenv:coverage]deps}
commands =
    sphinx-build -E -W -c docs/src/ -b singlehtml docs/src/ docs/build/html
    #sphinx-build -E -W -c docs/src/ -b man docs/src/ docs/build/man
    {[testenv:coverage]commands}


[coverage:paths]
source =
    src/
    **/site-packages/
tests =
    tests

[coverage:run]
branch = True
parallel = true
source =
    tests
omit =
    */__init__.py
    */__main__.py

[coverage:report]
show_missing = True
sort = Cover
exclude_lines =
    pragma: no cover
    raise AssertionError
    raise NotImplementedError

    # Debug
    def __repr__
    if self\.debug

    # Non-runnable
    if 0:
    if __name__ == .__main__.:
