[tox]
envlist = install, qa, lint, security, tests, docs, build, workflows

[testenv]
deps =

[testenv:coverage]
deps =
    .[tests]
commands =
    coverage run -m pytest --cov={envsitepackagesdir}/pywrapid --cov-report html {posargs}

[testenv:tests]
deps =
    .[tests]
commands =
    python -m pytest --junitxml=artifacts/junit/junit-{envname}.xml {posargs}

[testenv:flake8]
basepython = python3
skip_install = true
deps =
    flake8
    flake8-pyproject
commands =
    flake8 src/ tests/

[testenv:workflows]
description = Validate GitHub Actions workflow files
skip_install = true
deps =
    pyyaml>=5.1
    flake8
commands =
    python {toxinidir}/scripts/validate_workflows.py {toxinidir}/.github/workflows
    flake8 src/ tests/

[testenv:pylint]
basepython = python3
skip_install = false
deps =
    pylint
    .[standard]
commands =
    pylint src/

[testenv:mypy]
basepython = python3
skip_install = false
deps =
    mypy
    .[all, lint]
commands =
    mypy

[testenv:bandit]
basepython = python3
skip_install = true
deps =
    bandit
commands =
    bandit -r src/ -c pyproject.toml -f json -o {toxinidir}/artifacts/security/bandit-results.json

[testenv:black]
basepython = python3
skip_install = true
deps =
    black
commands =
    black --check src tests

[testenv:isort]
basepython = python3
skip_install = true
deps =
    isort
commands =
    isort --check src tests

[testenv:qa]
basepython = python3
skipsdist = true
deps =
    {[testenv:lint]deps}
    {[testenv:security]deps}
commands =
    {[testenv:lint]commands}
    {[testenv:security]commands}

[testenv:lint]
basepython = python3
skipsdist = true
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:mypy]deps}
    {[testenv:black]deps}
    {[testenv:isort]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:mypy]commands}
    {[testenv:black]commands}
    {[testenv:isort]commands}

[testenv:security]
basepython = python3
skipsdist = true
deps =
    .[security]
commands =
    {[testenv:bandit]commands}
    safety check --full-report -i 51457

[testenv:build]
basepython = python3
skip_install = true
deps =
    .[build]
commands =
    python -m build

[testenv:docs]
basepython = python3
skip_install = false
deps = .[docs]
commands =
    sphinx-build -E -W -c docs/src/ -b singlehtml docs/src/ artifacts/docs/html
    #sphinx-build -E -W -c docs/src/ -b man docs/src/ artifacts/docs/man

[coverage:paths]
source =
    src/
    **/site-packages/
tests =
    tests

[coverage:html]
directory = artifacts/coverage/

[coverage:run]
branch = True
parallel = true
source =
    src/
omit =
    */__init__.py
    */__main__.py

[coverage:report]
show_missing = True
sort = Cover
exclude_lines =
    pragma: no cover
    raise AssertionError
    raise NotImplementedError

    # Debug
    def __repr__
    if self\.debug

    # Non-runnable
    if 0:
    if __name__ == .__main__.: