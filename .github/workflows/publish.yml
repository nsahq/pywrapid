name: Publish

on:
  # Run when a GitHub release is created
  release:
    types: [published]
  
  # Allow manual triggering for testing/debugging
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'validate-only'
        type: choice
        options:
          - validate-only
          - build-only
          - draft-release-notes

# Define permissions needed for release operations
permissions:
  contents: write
  pull-requests: read
  
jobs:
  # Reuse the existing validation workflow
  validate:
    if: github.event.inputs.operation != 'draft-release-notes'
    uses: ./.github/workflows/validate-changes.yml
    with:
      all: true
  
  # Draft release notes without publishing
  draft-release-notes:
    if: github.event.inputs.operation == 'draft-release-notes'
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  # Build and publish if validation passes
  publish:
    needs: [validate]
    if: success() && (github.event_name == 'release' || github.event.inputs.operation == 'build-only')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important for setuptools_scm to work properly
      
      # Get Python version from CI config
      - name: Get CI configuration
        id: get-ci-config
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: 'pyproject.toml'
          field: 'tool.pywrapid.ci.default-python-version'
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.get-ci-config.outputs.value || '3.12' }}
          cache: 'pip'
        
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      # Build package - setuptools_scm will automatically use the correct version from Git tags
      - name: Build package
        run: python -m build
      
      # Validate the built package with twine (this validates the distribution artifacts, not the source)
      - name: Validate package metadata
        run: twine check dist/*
        
      # Update GitHub release notes with auto-generated content
      - name: Update GitHub release with generated notes
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz
        
      # Publish to PyPI - only when triggered by a GitHub release
      - name: Publish to PyPI
        if: github.event_name == 'release'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
        
      # Upload built distributions as artifacts
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
